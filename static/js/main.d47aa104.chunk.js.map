{"version":3,"sources":["store/index.ts","store/actionTypes.ts","helpers/api.ts","components/User.tsx","components/ToDo.tsx","components/ToDoList.tsx","App.tsx","index.tsx"],"names":["handleSuccess","todos","type","handleSort","sortType","initialState","isLoading","hasError","store","createStore","state","action","filter","task","id","taskId","composeWithDevTools","API_URLS","User","data","className","name","ToDo","dispatch","useDispatch","onClick","title","completed","user","ToDoList","map","key","App","tasks","useSelector","handleLoadClick","a","Promise","all","url","fetch","then","response","r","json","res","users","preparedTodos","find","userId","getSortedTodos","useCallback","typeOfSort","sort","b","localeCompare","Number","visibleTodos","useMemo","length","disabled","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d47aa104.chunk.js","sourcesContent":["import { createStore, AnyAction } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport {\n  START_LOADING,\n  HANLDE_SUCCESS,\n  HANDLE_ERROR,\n  HANDLE_REMOVE,\n  HANDLE_SORT,\n} from './actionTypes';\n\n// import sortReducer from './sort';\n// import loadingReducer from './loading';\n// import removReducer from './remove';\n\nexport const startLoading = () => ({ type: START_LOADING });\nexport const handleSuccess = (todos: PreparedTodos) => ({ type: HANLDE_SUCCESS, todos });\nexport const handleError = () => ({ type: HANDLE_ERROR });\nexport const handleSort = (sortType: string) => ({ type: HANDLE_SORT, sortType });\nexport const handleRemove = (taskId: number) => ({ type: HANDLE_REMOVE, taskId });\n\nexport type RootState = {\n  isLoading: boolean;\n  hasError: boolean;\n  todos: PreparedTodos[];\n  sortType: string;\n};\n\nconst initialState: RootState = {\n  isLoading: false,\n  hasError: false,\n  todos: [],\n  sortType: '',\n};\n\nconst rootReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case START_LOADING:\n      return {\n        ...state,\n        isLoading: true,\n        hasError: false,\n      };\n    case HANLDE_SUCCESS:\n      return {\n        ...state,\n        isLoading: false,\n        hasError: false,\n        todos: action.todos,\n      };\n    case HANDLE_ERROR:\n      return {\n        ...state,\n        isLoading: false,\n        hasError: true,\n      };\n\n    case HANDLE_REMOVE:\n      return {\n        ...state,\n        todos: state.todos.filter(task => task.id !== action.taskId),\n      };\n\n    case HANDLE_SORT:\n      return {\n        ...state,\n        sortType: action.sortType,\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(\n  rootReducer, composeWithDevTools(),\n);\n\nexport default store;\n","export const START_LOADING = 'START_LOADING';\nexport const HANLDE_SUCCESS = 'HANDLE_SUCCESS';\nexport const HANDLE_ERROR = 'HANDLE_ERRROR';\nexport const HANDLE_SORT = 'HANDLE_SORT';\nexport const HANDLE_REMOVE = 'HANDLE_REMOVE';\n","const API_URLS = ['https://mate-academy.github.io/react_dynamic-list-of-todos/api/users.json',\n  'https://mate-academy.github.io/react_dynamic-list-of-todos/api/todos.json'];\n\nexport const getDataFromServer = () => {\n  return Promise.all(API_URLS.map(url => fetch(url)))\n    .then(response => Promise.all(response.map(r => r.json())));\n};\n","import React from 'react';\n\ntype Props = {\n  data: User;\n};\n\nexport const User: React.FC<Props> = ({ data }) => {\n  return (\n    <h4 className=\"todo-card__user\">{data.name}</h4>\n  );\n};\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { User } from './User';\nimport './ToDo.scss';\nimport { handleRemove } from '../store';\n\ntype Props = {\n  task: PreparedTodos;\n};\n\nexport const ToDo: React.FC<Props> = ({ task }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <div className=\"todo-card\">\n      <button type=\"button\" className=\"todo-card__remove-btn\" onClick={() => dispatch(handleRemove(task.id))}>remove</button>\n      <h2 className=\"todo-card__task\">{task.title}</h2>\n      {task.completed\n        ? <h3 className=\"todo-card--finished\">Completed</h3>\n        : <h3 className=\"todo-card--unfinished\">Not Completed</h3>}\n\n      <User data={task.user} />\n    </div>\n  );\n};\n","import React from 'react';\nimport { ToDo } from './ToDo';\nimport './TodoList.scss';\n\ntype Props = {\n  todos: PreparedTodos[];\n};\n\nexport const ToDoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <>\n      {todos.map(task => (\n        <ToDo task={task} key={task.id} />\n      ))}\n    </>\n  );\n};\n","import './App.scss';\nimport React, { useMemo, useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getDataFromServer } from './helpers/api';\nimport {\n  startLoading,\n  handleSuccess,\n  handleError,\n  RootState,\n  handleSort,\n} from './store';\n\nimport { ToDoList } from './components/ToDoList';\n\nconst App = () => {\n  const tasks = useSelector((state: RootState) => state.todos);\n  const hasError = useSelector((state: RootState) => state.hasError);\n  const isLoading = useSelector((state: RootState) => state.isLoading);\n  const sortType = useSelector((state: RootState) => state.sortType);\n  const dispatch = useDispatch();\n\n  const handleLoadClick = async () => {\n    try {\n      dispatch(startLoading());\n      const res = await getDataFromServer();\n      const [users, todos] = res;\n      const preparedTodos = todos.map((task: ToDo) => ({\n        ...task,\n        user: users.find((user: User) => user.id === task.userId),\n      }));\n\n      dispatch(handleSuccess(preparedTodos));\n    } catch {\n      dispatch(handleError());\n    }\n  };\n\n  const getSortedTodos = useCallback((typeOfSort: string) => {\n    switch (typeOfSort) {\n      case 'title':\n        return [...tasks].sort((a, b) => a.title.localeCompare(b.title));\n      case 'completness':\n        return [...tasks].sort((a, b) => (Number(a.completed) - Number(b.completed)));\n      case 'name':\n        return [...tasks].sort((a, b) => a.user.name.localeCompare(b.user.name));\n      default:\n        return tasks;\n    }\n  }, [tasks]);\n\n  const visibleTodos = useMemo(() => {\n    return getSortedTodos(sortType);\n  }, [sortType, getSortedTodos]);\n\n  return (\n    <div className=\"App\">\n      {hasError && <h1>Some errors appeared. Please, try again</h1>}\n      {tasks.length === 0 ? (\n        <button\n          className=\"button\"\n          type=\"button\"\n          onClick={handleLoadClick}\n          disabled={isLoading}\n        >\n          {isLoading ? 'Loading...' : 'Load'}\n        </button>\n      ) : (\n        <>\n          <button\n            type=\"button\"\n            className=\"button\"\n            onClick={() => dispatch(handleSort('title'))}\n          >\n            Sort By Title\n          </button>\n          <button\n            type=\"button\"\n            className=\"button\"\n            onClick={() => dispatch(handleSort('completness'))}\n          >\n            Sort By Status\n          </button>\n          <button\n            type=\"button\"\n            className=\"button\"\n            onClick={() => dispatch(handleSort('name'))}\n          >\n            Sort By Name\n          </button>\n          <div className=\"container\">\n            <ToDoList todos={visibleTodos} />\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport store from './store';\nimport App from './App';\n\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}